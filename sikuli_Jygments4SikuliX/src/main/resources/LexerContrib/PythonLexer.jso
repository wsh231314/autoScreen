/*
* Python Lexer
*
*
* State entries are arrays where the first argument is either a
* command (beginning with "#") or a regular expression to which
* a rule is applied.
*
* Supported commands:
*
*  "#include": The value is the state to include.
*
* Rules are literal regular expressions, or functions (beginning
* with "#") applied to lists of strings in the "constants" map.
*
* Regex literals can use Python-style raw notation, prefixed with
* "r". Both single-quotes and double-quoted raw notations are
* supported.
*
* The second rule argument is the token type to apply to regex's
* match, or an array of token types to apply to group matches, in
* ordered sequence.
*
* The optional third argument is the next state to switch to
* after the rule is applied, or an array of states to combine and
* switch to.
*
* States can be either literal names of states, or the relative
* references "#push" and "#pop" for the state stack. "#pop" can
* also optionally specify a depth beyond one, for example:
* "#pop:2".
*
*/

{
    "aliases": ["python", "py"],
    "filenames": ["*.py", "*.pyw", "*.sc", "SConstruct", "SConscript"],
    "mimetypes": ["text/x-python", "application/x-python"],

	"class": "regex",

	"states":
	{
		"root":
		[
			[r'\n', "Text"],
			[r'^(\s*)("""(?:.|\n)*?""")', ["Text", "String.Doc"]],
			[r"^(\s*)('''(?:.|\n)*?''')", ["Text", "String.Doc"]],
			[r'[^\S\n]+', "Text"],
			[r'#.*$', "Comment"],
			[r'[\]{}:(),;\[]', "Punctuation"], /* square brackets were escaped for Jygments */
			[r'\\\n', "Text"],
			[r'\\', "Text"],
			[r'(in|is|and|or|not)\b', "Operator.Word"],
			[r'!=|==|<<|>>|[-~+/*%=<>&^|.]', "Operator"],
			["#include", "keywords"],
			[r'(def)((?:\s|\\\s)+)', ["Keyword", "Text"], "funcname"],
			[r'(class)((?:\s|\\\s)+)', ["Keyword", "Text"], "classname"],
			[r'(from)((?:\s|\\\s)+)', ["Keyword.Namespace", "Text"], "fromimport"],
			[r'(import)((?:\s|\\\s)+)', ["Keyword.Namespace", "Text"], "import"],
			["#include", "builtins"],
			["#include", "backtick"],
			[r'(?:[rR]|[uU][rR]|[rR][uU])"""', "String", "tdqs"],
			[r"(?:[rR]|[uU][rR]|[rR][uU])'''", "String", "tsqs"],
			[r'(?:[rR]|[uU][rR]|[rR][uU])"', "String", "dqs"],
			[r"(?:[rR]|[uU][rR]|[rR][uU])'", "String", "sqs"],
			[r'[2uU]?"""', "String", "stringescape+tdqs"],
			[r"[uU]?'''", "String", "stringescape+tsqs"],
			[r'[uU]?"', "String", "stringescape+dqs"],
			[r"[uU]?'", "String", "stringescape+sqs"],
			["#include", "name"],
			["#include", "numbers"]
		],

		"keywords":
		[
			[r"(assert|break|continue|del|elif|else|except|exec|finally|for|global|if|lambda|pass|print|raise|return|try|while|yield|as|with)\b", "Keyword"]
		],

		"builtins":
		[
			["#constant:builtins", "Name.Builtin"],
			[r'(?<!\.)(self|None|Ellipsis|NotImplemented|False|True)\b', "Name.Builtin.Pseudo"], 
			["#constant:exceptions", "Name.Exception"]
		],

		"numbers":
		[
			[r'(\d+\.\d*|\d*\.\d+)([eE][+-]?[0-9]+)?', "Number.Float"],
			[r'\d+[eE][+-]?[0-9]+', "Number.Float"],
			[r'0\d+', "Number.Oct"],
			[r'0[xX][a-fA-F0-9]+', "Number.Hex"],
			[r'\d+L', "Number.Integer.Long"],
			[r'\d+', "Number.Integer"]
		],

		"backtick":
		[
			[r"`.*?`", "String.Backtick"]
		],

		"name":
		[
			[r'@[a-zA-Z0-9_.]+', "Name.Decorator"],
			[r'[a-zA-Z_][a-zA-Z0-9_]*', "Name"]
		],

		"funcname":
		[
			[r'[a-zA-Z_][a-zA-Z0-9_]*', "Name.Function", "#pop"]
		],

		"classname":
		[
			[r'[a-zA-Z_][a-zA-Z0-9_]*', "Name.Class", "#pop"]
		],

		"import":
		[
			[r'((?:\s|\\\s)+)(as)((?:\s|\\\s)+)', ["Text", "Keyword.Namespace", "Text"]],
			[r'[a-zA-Z_][a-zA-Z0-9_.]*', "Name.Namespace"],
			[r'(\s*)(,)(\s*)', ["Text", "Operator", "Text"]],
			[r'', "Text", "#pop"] /* all else: go back */
		],

		"fromimport":
		[
			[r'((?:\s|\\\s)+)(import)\b', ["Text", "Keyword.Namespace"], "#pop"],
			[r'[a-zA-Z_.][a-zA-Z0-9_.]*', "Name.Namespace"]
		],

		"stringescape":
		[
			[r'\\([\\abfnrtv"\']|\n|N{.*?}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', "String.Escape"]
		],

		"strings":
		[
			[r'%(\([a-zA-Z0-9_]+\))?[-#0 +]*([0-9]+|[*])?(\.([0-9]+|[*]))?[hlL]?[diouxXeEfFgGcrs%]', "String.Interpol"],
			[r'[^\\\'"%\n]+', "String"],
			/* quotes, percents and backslashes must be parsed one at a time */
			[r'[\'"\\]', "String"],
			/* unhandled string formatting sign */
			[r'%', "String"]
			/* newlines are an error (use "nl" state) */
		],

		"nl":
		[
			[r'\n', "String"]
		],

		"dqs":
		[
			[r'"', "String", "#pop"],
			[r'\\\\|\\"|\\\n', "String.Escape"], /* included here again for raw strings */
			["#include", "strings"]
		],

		"sqs":
		[
			[r"'", "String", "#pop"],
			[r"\\\\|\\'|\\\n", "String.Escape"], /* included here again for raw strings */
			["#include", "strings"]
		],

		"tdqs":
		[
			[r'"""', "String", "#pop"],
			["#include", "strings"],
			["#include", "nl"]
		],

		"tsqs":
		[
			[r"'''", "String", "#pop"],
			["#include", "strings"],
			["#include", "nl"]
		]
	},
	
	"constants":
	{			
		"builtins":
		[
			r"(?<!\.)(__import__|abs|all|any|apply|basestring|bin|bool|buffer|",
			r"bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|",
			r"complex|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|",
			r"file|filter|float|frozenset|getattr|globals|hasattr|hash|hex|id|",
			r"input|int|intern|isinstance|issubclass|iter|len|list|locals|",
			r"long|map|max|min|next|object|oct|open|ord|pow|property|range|",
			r"raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|",
			r"sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|",
			r"vars|xrange|zip)\b"
		],

		"exceptions":
		[			
			r"(?<!\.)(ArithmeticError|AssertionError|AttributeError|",
			r"BaseException|DeprecationWarning|EOFError|EnvironmentError|",
			r"Exception|FloatingPointError|FutureWarning|GeneratorExit|IOError|",
			r"ImportError|ImportWarning|IndentationError|IndexError|KeyError|",
			r"KeyboardInterrupt|LookupError|MemoryError|NameError|",
			r"NotImplemented|NotImplementedError|OSError|OverflowError|",
			r"OverflowWarning|PendingDeprecationWarning|ReferenceError|",
			r"RuntimeError|RuntimeWarning|StandardError|StopIteration|",
			r"SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|",
			r"TypeError|UnboundLocalError|UnicodeDecodeError|",
			r"UnicodeEncodeError|UnicodeError|UnicodeTranslateError|",
			r"UnicodeWarning|UserWarning|ValueError|VMSError|Warning|",
			r"WindowsError|ZeroDivisionError)\b"
		]
	}
}