diff --git a/IDE/src/main/java/org/sikuli/ide/PatternPaneTargetOffset.java b/IDE/src/main/java/org/sikuli/ide/PatternPaneTargetOffset.java
old mode 100755
new mode 100644
index 3b0d88f..7ff0935
--- a/IDE/src/main/java/org/sikuli/ide/PatternPaneTargetOffset.java
+++ b/IDE/src/main/java/org/sikuli/ide/PatternPaneTargetOffset.java
@@ -2,40 +2,41 @@
  * Copyright 2010-2016, Sikuli.org, sikulix.com
  * Released under the MIT License.
  *
  * modified RaiMan 2013
  */
 package org.sikuli.ide;
 
 import java.awt.*;
 import java.awt.event.*;
 import java.awt.image.*;
 import java.io.*;
 import javax.imageio.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import org.sikuli.basics.LoadingSpinner;
 import org.sikuli.basics.Debug;
 import org.sikuli.script.Finder;
 import org.sikuli.script.Location;
 import org.sikuli.script.Match;
 import org.sikuli.script.Region;
+import org.sikuli.script.Screen;
 import org.sikuli.script.ScreenImage;
 
 class PatternPaneTargetOffset extends JPanel implements MouseListener, MouseWheelListener, ChangeListener {
 
   final static String me = "PatternPaneTargetOffset: ";
 	final static int DEFAULT_H = 300;
 	final static float DEFAULT_PATTERN_RATIO = 0.4f;
 	private static final Color COLOR_BG_LINE = new Color(210, 210, 210, 130);
 	ScreenImage _simg;
 	BufferedImage _img;
 	Match _match = null;
 	int _viewX, _viewY, _viewW, _viewH;
 	float _zoomRatio, _ratio;
 	Location _tar = new Location(0, 0);
 	Location _offset = new Location(0, 0);
 	JSpinner txtX, txtY;
 	private LoadingSpinner _loading;
 	private boolean _finding = true;
 
 	public PatternPaneTargetOffset(ScreenImage simg, String patFilename, Location initOffset) {
@@ -43,45 +44,47 @@
 		_ratio = DEFAULT_PATTERN_RATIO;
 		Rectangle r = _simg.getROI();
 		int w = DEFAULT_H / r.height * r.width;
 		setPreferredSize(new Dimension(w, DEFAULT_H));
 
 		addMouseListener(this);
 		addMouseWheelListener(this);
 
 		_loading = new LoadingSpinner();
 		findTarget(patFilename, initOffset);
 	}
 
 	void findTarget(final String patFilename, final Location initOffset) {
 		Thread thread = new Thread(new Runnable() {
 			@Override
 			public void run() {
         Region screenUnion = Region.create(0, 0, 1, 1);
 				Finder f = new Finder(_simg, screenUnion);
 				try {
 					f.find(patFilename);
+					
 					if (f.hasNext()) {
-//TODO rewrite completely for ScreenUnion
-            screenUnion.getScreen().setAsScreenUnion();
+						Screen s = (Screen) screenUnion.getScreen();
+						//TODO rewrite completely for ScreenUnion
+						s.setAsScreenUnion();
 						_match = f.next();
-            screenUnion.getScreen().setAsScreen();
+						s.setAsScreen();
 						if (initOffset != null) {
 							setTarget(initOffset.x, initOffset.y);
 						} else {
 							setTarget(0, 0);
 						}
 					}
 					_img = ImageIO.read(new File(patFilename));
 				} catch (IOException e) {
 					Debug.error(me + "Can't load " + patFilename);
 				}
 				synchronized (PatternPaneTargetOffset.this) {
 					_finding = false;
 				}
 				repaint();
 			}
 		});
 		thread.start();
 	}
 
 	static String _I(String key, Object... args) {
diff --git a/IDE/src/main/java/org/sikuli/ide/SikuliIDE.java b/IDE/src/main/java/org/sikuli/ide/SikuliIDE.java
old mode 100755
new mode 100644
index 0066f4f..5657c3f
--- a/IDE/src/main/java/org/sikuli/ide/SikuliIDE.java
+++ b/IDE/src/main/java/org/sikuli/ide/SikuliIDE.java
@@ -293,41 +293,41 @@
     super("Sikuli IDE");
   }
 
   private void initSikuliIDE(String[] args) {
     prefs = PreferencesUser.getInstance();
     if (prefs.getUserType() < 0) {
       prefs.setUserType(PreferencesUser.NEWBEE);
       prefs.setIdeSession("");
       prefs.setDefaults(prefs.getUserType());
     }
 
     if (nativeSupport != null) {
       nativeSupport.initIDE(this);
     }
 
     IResourceLoader loader = FileManager.getNativeLoader("basic", args);
     loader.check(Settings.SIKULI_LIB);
 
     _windowSize = prefs.getIdeSize();
     _windowLocation = prefs.getIdeLocation();
-    Screen m = (new Location(_windowLocation)).getScreen();
+    Screen m = (Screen) (new Location(_windowLocation)).getScreen();
     if (m == null) {
       Debug.error("IDE: remembered window not valid - going to primary screen");
       m = Screen.getPrimaryScreen();
       _windowSize.width = 0;
     }
     Rectangle s = m.getBounds();
     if (_windowSize.width == 0 || _windowSize.width > s.width
             || _windowSize.height > s.height) {
       if (s.width < 1025) {
         _windowSize = new Dimension(1024, 700);
         _windowLocation = new Point(0, 0);
       } else {
         _windowSize = new Dimension(s.width - 150, s.height - 100);
         _windowLocation = new Point(75, 0);
       }
     }
     if (_windowSize.getHeight() < commandBarHeight) {
       smallScreen = true;
     }
     setSize(_windowSize);
